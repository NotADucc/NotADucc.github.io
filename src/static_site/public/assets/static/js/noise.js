const is_mobile=()=>/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),random=b=>Math.random()*b,easingFunction=bezier(.45,.1,.25,1);let ctx;const DOM_elements={canvas:document.getElementById("noise"),header:document.getElementsByTagName("header")[0],main:document.getElementsByTagName("main")[0],expand_button:document.getElementById("expand_button"),expand_button_triangle:document.getElementById("expand_button_triangle"),plus_button:document.getElementById("plus_button"),minus_button:document.getElementById("minus_button"),counter:document.getElementById("counter")},canvas_info={FRICTION:.4,PARTICLE_SIZE:5,MIN_DISTANCE:6,MIN_DISTANCE_SQ:this.MIN_DISTANCE*this.MIN_DISTANCE,MAX_DISTANCE:30,MAX_DISTANCE_SQ:this.MAX_DISTANCE*this.MAX_DISTANCE,MAX_PARTICLE_MULTIPLIER:30,CANVAS_MIN_HEIGHT:73,is_expanded:!1,multiplier:is_mobile()?3:10,get_redraw_multiplier:()=>DOM_elements.canvas.height<=canvas_info.CANVAS_MIN_HEIGHT?1:canvas_info.multiplier,get_canvas_height:()=>canvas_info.is_expanded?is_mobile()?window.innerHeight>>1:window.innerHeight:canvas_info.CANVAS_MIN_HEIGHT},particle_system={particles:[],quadtree:null,get length(){return this.particles.length},create_particles(e){this.clear_particles(),this.quadtree=new QuadTree(new Rectangle(DOM_elements.canvas.width/2,DOM_elements.canvas.height/2,DOM_elements.canvas.width,DOM_elements.canvas.height));for(const[d,b]of this.info.entries()){const c=b.count*e;for(let e=0;e<c;e++){const c={key:d,position:[random(DOM_elements.canvas.width),random(DOM_elements.canvas.height)],velocity:[0,0],color:b.color,bounds:b.bounds};this.particles.push(c),this.quadtree.insert(c)}}},clear_particles(){this.particles.length=0,this.quadtree=null},update_positions(){calc_next_positions(),this.quadtree.update_tree(this.quadtree),this.quadtree.remove_nodes()},query_particles(b){return this.quadtree.query(b,[])},info:[{color:[.22,.45,.91,1,"#3875ea"],count:70,bounds:!0,attraction:[.32,-.4,-.4]},{color:[1,0,1,1,"#ff00ff"],count:25,bounds:!0,attraction:[.4,.1,-.2]},{color:[.65,.13,.38,1,"#a62161"],count:150,bounds:!1,attraction:[.4,0,-.15]}]};let draw_particles=()=>{},update_viewport=()=>{};const calc_next_positions=()=>{var e=Math.abs;const a=DOM_elements.canvas.width,b=DOM_elements.canvas.height;for(let c=0;c<particle_system.length;c++){let p=0,q=0;const f=particle_system.particles[c],d=new Rectangle(f.position[0],f.position[1],canvas_info.MAX_DISTANCE,canvas_info.MAX_DISTANCE),g=particle_system.query_particles(d);for(let c=0;c<g.length;c++){const h=g[c],i=particle_system.info[f.key].attraction[h.key];if(0==i)continue;let j=f.position[0]-h.position[0],k=f.position[1]-h.position[1];f.bounds||h.bounds||(j=e(j),k=e(k),j>a>>1&&(j=a-j),k>b>>1&&(k=b-k));const l=j*j+k*k;if(0==l||l>canvas_info.MAX_DISTANCE_SQ)continue;const m=Math.sqrt(l),d=(m<=canvas_info.MIN_DISTANCE?.3:-i)/m;p+=d*j,q+=d*k}f.velocity[0]=(f.velocity[0]+p)*canvas_info.FRICTION,f.velocity[1]=(f.velocity[1]+q)*canvas_info.FRICTION,f.position[0]=(f.position[0]+f.velocity[0]+a)%a,f.position[1]=(f.position[1]+f.velocity[1]+b)%b}};let current_update_frame;const update_particles=()=>{particle_system.update_positions(),draw_particles(),current_update_frame=requestAnimationFrame(update_particles)},update_width=b=>{DOM_elements.canvas.width=b},update_height=b=>{DOM_elements.canvas.height=b,DOM_elements.header.style.height=DOM_elements.main.style.marginTop=`${b}px`},animate_header=(e,a,b)=>{if(1>=e){const c=a+(b-a)*easingFunction(e);update_height(c),update_viewport(),requestAnimationFrame(()=>animate_header(e+.01,a,b)),particle_system.create_particles(1),draw_particles()}else update_height(b),update_viewport(),particle_system.create_particles(canvas_info.get_redraw_multiplier()),update_particles()},init=()=>{if(ctx=DOM_elements.canvas.getContext("webgl"),ctx){update_viewport=()=>{ctx.viewport(0,0,ctx.drawingBufferWidth,ctx.drawingBufferHeight)};const k=(e,a,b)=>{const c=e.createShader(a);return e.shaderSource(c,b),e.compileShader(c),e.getShaderParameter(c,e.COMPILE_STATUS)?c:(console.error("Shader compile error: ",e.getShaderInfoLog(c)),e.deleteShader(c),null)},a=k(ctx,ctx.VERTEX_SHADER,"\n            precision lowp float;\n            attribute vec2 a_position;\n            attribute vec4 a_color;\n            uniform vec2 u_resolution;\n            uniform float u_pointSize;\n            varying vec4 v_color;\n        \n            void main() {\n                vec2 zeroToOne = a_position / u_resolution;\n                vec2 zeroToTwo = zeroToOne * 2.0;\n                vec2 clipSpace = zeroToTwo - 1.0;\n        \n                gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n                gl_PointSize  = u_pointSize;\n                v_color = a_color;\n            }\n        "),b=k(ctx,ctx.FRAGMENT_SHADER,`
            precision lowp float;
            varying vec4 v_color;

            void main() {
                gl_FragColor = v_color;
            }
        `),c=ctx.createProgram();if(ctx.attachShader(c,a),ctx.attachShader(c,b),ctx.linkProgram(c),!ctx.getProgramParameter(c,ctx.LINK_STATUS))return void console.error("Program linking error: ",ctx.getProgramInfoLog(c));const d=ctx.getAttribLocation(c,"a_position"),e=ctx.getAttribLocation(c,"a_color"),f=ctx.getUniformLocation(c,"u_resolution"),g=ctx.getUniformLocation(c,"u_pointSize"),h=ctx.createBuffer(),i=ctx.createBuffer();draw_particles=()=>{const j=new Float32Array(particle_system.length<<1),a=new Float32Array(particle_system.length<<2);for(let b=0;b<particle_system.length;b++){const c=particle_system.particles[b];j[b<<1]=c.position[0],j[(b<<1)+1]=c.position[1],a[b<<2]=c.color[0],a[(b<<2)+1]=c.color[1],a[(b<<2)+2]=c.color[2],a[(b<<2)+3]=1}ctx.bindBuffer(ctx.ARRAY_BUFFER,h),ctx.bufferData(ctx.ARRAY_BUFFER,j,ctx.DYNAMIC_DRAW),ctx.enableVertexAttribArray(d),ctx.vertexAttribPointer(d,2,ctx.FLOAT,!1,0,0),ctx.bindBuffer(ctx.ARRAY_BUFFER,i),ctx.bufferData(ctx.ARRAY_BUFFER,a,ctx.DYNAMIC_DRAW),ctx.enableVertexAttribArray(e),ctx.vertexAttribPointer(e,4,ctx.FLOAT,!1,0,0),ctx.useProgram(c),ctx.uniform2f(f,DOM_elements.canvas.width,DOM_elements.canvas.height),ctx.uniform1f(g,canvas_info.PARTICLE_SIZE),ctx.clear(ctx.COLOR_BUFFER_BIT),ctx.drawArrays(ctx.position,0,particle_system.length)}}else{ctx=DOM_elements.canvas.getContext("2d");const d=(f,a,b,d,c)=>{ctx.fillStyle=b,ctx.fillRect(f,a,d,c)};draw_particles=()=>{ctx.clearRect(0,0,DOM_elements.canvas.width,DOM_elements.canvas.height);for(let a=0;a<particle_system.length;a++){const b=particle_system.particles[a];d(b.position[0],b.position[1],b.color[4],canvas_info.PARTICLE_SIZE,canvas_info.PARTICLE_SIZE)}}}window.dispatchEvent(new CustomEvent("resize")),update_particles()};DOM_elements.expand_button.addEventListener("click",c=>{canvas_info.is_expanded=!canvas_info.is_expanded;const a=canvas_info.get_canvas_height();DOM_elements.expand_button_triangle.classList.toggle("triangle_rotate"),is_mobile()||DOM_elements.counter.classList.toggle("invisible"),cancelAnimationFrame(current_update_frame),animate_header(0,DOM_elements.canvas.height,a)});function change_multiplier(c){const a=canvas_info.multiplier+c;1>a||a>canvas_info.MAX_PARTICLE_MULTIPLIER||(canvas_info.multiplier=a,particle_system.create_particles(canvas_info.get_redraw_multiplier()),DOM_elements.plus_button.disabled=canvas_info.multiplier>=canvas_info.MAX_PARTICLE_MULTIPLIER,DOM_elements.minus_button.disabled=1>=canvas_info.multiplier,DOM_elements.plus_button.classList.toggle("disabled",DOM_elements.plus_button.disabled),DOM_elements.minus_button.classList.toggle("disabled",DOM_elements.minus_button.disabled))}DOM_elements.plus_button.addEventListener("click",()=>change_multiplier(1)),DOM_elements.minus_button.addEventListener("click",()=>change_multiplier(-1)),addEventListener("resize",c=>{const a=canvas_info.get_canvas_height();DOM_elements.canvas.width===window.innerWidth&&(is_mobile()||DOM_elements.canvas.innerHeight===a)||(update_width(window.innerWidth),update_height(a),update_viewport(),particle_system.create_particles(canvas_info.get_redraw_multiplier()))}),addEventListener("load",init);