const is_mobile=()=>/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),random=a=>Math.random()*a,easingFunction=bezier(.45,.1,.25,1);let ctx;const DOM_elements={canvas:document.getElementById("noise"),header:document.getElementsByTagName("header")[0],main:document.getElementsByTagName("main")[0],expand_button:document.getElementById("expand_button"),expand_button_triangle:document.getElementById("expand_button_triangle"),plus_button:document.getElementById("plus_button"),minus_button:document.getElementById("minus_button"),counter:document.getElementById("counter")},canvas_info={FRICTION:.4,PARTICLE_SIZE:5,MIN_DISTANCE:6,MIN_DISTANCE_SQ:this.MIN_DISTANCE*this.MIN_DISTANCE,MAX_DISTANCE:30,MAX_DISTANCE_SQ:this.MAX_DISTANCE*this.MAX_DISTANCE,MAX_PARTICLE_MULTIPLIER:30,CANVAS_MIN_HEIGHT:73,is_expanded:!1,multiplier:is_mobile()?3:10,get_redraw_multiplier:()=>DOM_elements.canvas.height<=canvas_info.CANVAS_MIN_HEIGHT?1:canvas_info.multiplier,get_canvas_height:()=>canvas_info.is_expanded?is_mobile()?window.innerHeight>>1:window.innerHeight:canvas_info.CANVAS_MIN_HEIGHT},particle_system={particles:[],quadtree:null,get length(){return this.particles.length},create_particles(a){this.clear_particles(),this.quadtree=new QuadTree(new Rectangle(DOM_elements.canvas.width/2,DOM_elements.canvas.height/2,DOM_elements.canvas.width,DOM_elements.canvas.height));for(const[b,c]of this.info.entries()){const d=c.count*a;for(let a=0;a<d;a++){const a={key:b,position:[random(DOM_elements.canvas.width),random(DOM_elements.canvas.height)],velocity:[0,0],color:c.color,bounds:c.bounds};this.particles.push(a),this.quadtree.insert(a)}}},clear_particles(){this.particles.length=0,this.quadtree=null},update_positions(){calc_next_positions(),this.quadtree.update_tree(this.quadtree),this.quadtree.remove_nodes()},query_particles(a){return this.quadtree.query(a,[])},info:[{color:[.22,.45,.91,1,"#3875ea"],count:70,bounds:!0,attraction:[.32,-.4,-.4]},{color:[1,0,1,1,"#ff00ff"],count:25,bounds:!0,attraction:[.4,.1,-.2]},{color:[.65,.13,.38,1,"#a62161"],count:150,bounds:!1,attraction:[.4,0,-.15]}]};let draw_particles=()=>{},update_viewport=()=>{};const calc_next_positions=()=>{var a=Math.abs;const b=DOM_elements.canvas.width,c=DOM_elements.canvas.height;for(let d=0;d<particle_system.length;d++){let e=0,f=0;const g=particle_system.particles[d],h=new Rectangle(g.position[0],g.position[1],canvas_info.MAX_DISTANCE,canvas_info.MAX_DISTANCE),i=particle_system.query_particles(h);for(let h=0;h<i.length;h++){const j=i[h],k=particle_system.info[g.key].attraction[j.key];if(0==k)continue;let l=g.position[0]-j.position[0],m=g.position[1]-j.position[1];g.bounds||j.bounds||(l=a(l),m=a(m),l>b>>1&&(l=b-l),m>c>>1&&(m=c-m));const n=l*l+m*m;if(0==n||n>canvas_info.MAX_DISTANCE_SQ)continue;const d=Math.sqrt(n),o=(d<=canvas_info.MIN_DISTANCE?.3:-k)/d;e+=o*l,f+=o*m}g.velocity[0]=(g.velocity[0]+e)*canvas_info.FRICTION,g.velocity[1]=(g.velocity[1]+f)*canvas_info.FRICTION,g.position[0]=(g.position[0]+g.velocity[0]+b)%b,g.position[1]=(g.position[1]+g.velocity[1]+c)%c}};let current_update_frame;const update_particles=()=>{particle_system.update_positions(),draw_particles(),current_update_frame=requestAnimationFrame(update_particles)},update_width=a=>{DOM_elements.canvas.width=a},update_height=a=>{DOM_elements.canvas.height=a,DOM_elements.header.style.height=DOM_elements.main.style.marginTop=`${a}px`},animate_header=(a,b,c)=>{if(1>=a){const d=b+(c-b)*easingFunction(a);update_height(d),update_viewport(),requestAnimationFrame(()=>animate_header(a+.01,b,c)),particle_system.create_particles(1),draw_particles()}else update_height(c),update_viewport(),particle_system.create_particles(canvas_info.get_redraw_multiplier()),update_particles()},init=()=>{if(ctx=DOM_elements.canvas.getContext("webgl"),ctx){update_viewport=()=>{ctx.viewport(0,0,ctx.drawingBufferWidth,ctx.drawingBufferHeight)};const a=(a,b,c)=>{const d=a.createShader(b);return a.shaderSource(d,c),a.compileShader(d),a.getShaderParameter(d,a.COMPILE_STATUS)?d:(console.error("Shader compile error: ",a.getShaderInfoLog(d)),a.deleteShader(d),null)},b=a(ctx,ctx.VERTEX_SHADER,"\n            precision lowp float;\n            attribute vec2 a_position;\n            attribute vec4 a_color;\n            uniform vec2 u_resolution;\n            uniform float u_pointSize;\n            varying vec4 v_color;\n        \n            void main() {\n                vec2 zeroToOne = a_position / u_resolution;\n                vec2 zeroToTwo = zeroToOne * 2.0;\n                vec2 clipSpace = zeroToTwo - 1.0;\n        \n                gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n                gl_PointSize  = u_pointSize;\n                v_color = a_color;\n            }\n        "),c=a(ctx,ctx.FRAGMENT_SHADER,`
            precision lowp float;
            varying vec4 v_color;

            void main() {
                gl_FragColor = v_color;
            }
        `),d=ctx.createProgram();if(ctx.attachShader(d,b),ctx.attachShader(d,c),ctx.linkProgram(d),!ctx.getProgramParameter(d,ctx.LINK_STATUS))return void console.error("Program linking error: ",ctx.getProgramInfoLog(d));const e=ctx.getAttribLocation(d,"a_position"),f=ctx.getAttribLocation(d,"a_color"),g=ctx.getUniformLocation(d,"u_resolution"),h=ctx.getUniformLocation(d,"u_pointSize"),i=ctx.createBuffer(),j=ctx.createBuffer();draw_particles=()=>{const a=new Float32Array(particle_system.length<<1),b=new Float32Array(particle_system.length<<2);for(let c=0;c<particle_system.length;c++){const d=particle_system.particles[c];a[c<<1]=d.position[0],a[(c<<1)+1]=d.position[1],b[c<<2]=d.color[0],b[(c<<2)+1]=d.color[1],b[(c<<2)+2]=d.color[2],b[(c<<2)+3]=1}ctx.bindBuffer(ctx.ARRAY_BUFFER,i),ctx.bufferData(ctx.ARRAY_BUFFER,a,ctx.DYNAMIC_DRAW),ctx.enableVertexAttribArray(e),ctx.vertexAttribPointer(e,2,ctx.FLOAT,!1,0,0),ctx.bindBuffer(ctx.ARRAY_BUFFER,j),ctx.bufferData(ctx.ARRAY_BUFFER,b,ctx.DYNAMIC_DRAW),ctx.enableVertexAttribArray(f),ctx.vertexAttribPointer(f,4,ctx.FLOAT,!1,0,0),ctx.useProgram(d),ctx.uniform2f(g,DOM_elements.canvas.width,DOM_elements.canvas.height),ctx.uniform1f(h,canvas_info.PARTICLE_SIZE),ctx.clear(ctx.COLOR_BUFFER_BIT),ctx.drawArrays(ctx.position,0,particle_system.length)}}else{ctx=DOM_elements.canvas.getContext("2d");const a=(a,b,d,c,e)=>{ctx.fillStyle=d,ctx.fillRect(a,b,c,e)};draw_particles=()=>{ctx.clearRect(0,0,DOM_elements.canvas.width,DOM_elements.canvas.height);for(let b=0;b<particle_system.length;b++){const c=particle_system.particles[b];a(c.position[0],c.position[1],c.color[4],canvas_info.PARTICLE_SIZE,canvas_info.PARTICLE_SIZE)}}}window.dispatchEvent(new CustomEvent("resize")),update_particles()};DOM_elements.expand_button.addEventListener("click",a=>{canvas_info.is_expanded=!canvas_info.is_expanded;const b=canvas_info.get_canvas_height();DOM_elements.expand_button_triangle.classList.toggle("triangle_rotate"),is_mobile()||DOM_elements.counter.classList.toggle("invisible"),cancelAnimationFrame(current_update_frame),animate_header(0,DOM_elements.canvas.height,b)});function change_multiplier(a){const b=canvas_info.multiplier+a;1>b||b>canvas_info.MAX_PARTICLE_MULTIPLIER||(canvas_info.multiplier=b,particle_system.create_particles(canvas_info.get_redraw_multiplier()),DOM_elements.plus_button.disabled=canvas_info.multiplier>=canvas_info.MAX_PARTICLE_MULTIPLIER,DOM_elements.minus_button.disabled=1>=canvas_info.multiplier,DOM_elements.plus_button.classList.toggle("disabled",DOM_elements.plus_button.disabled),DOM_elements.minus_button.classList.toggle("disabled",DOM_elements.minus_button.disabled))}DOM_elements.plus_button.addEventListener("click",()=>change_multiplier(1)),DOM_elements.minus_button.addEventListener("click",()=>change_multiplier(-1)),addEventListener("resize",a=>{const b=canvas_info.get_canvas_height();DOM_elements.canvas.width===window.innerWidth&&(is_mobile()||DOM_elements.canvas.innerHeight===b)||(update_width(window.innerWidth),update_height(b),update_viewport(),particle_system.create_particles(canvas_info.get_redraw_multiplier()))}),addEventListener("load",init);