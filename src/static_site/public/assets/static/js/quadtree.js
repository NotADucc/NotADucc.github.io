class Point{constructor(a,b){this.x=a,this.y=b}}class Rectangle{constructor(a,b,c,d){this.x=a,this.y=b,this.w=c,this.h=d,this.minX=this.x-this.w,this.maxX=this.x+this.w,this.minY=this.y-this.h,this.maxY=this.y+this.h}contains(a,b){return a>=this.minX&a<=this.maxX&b>=this.minY&b<=this.maxY}intersects(a){return this.maxX>=a.minX&this.minX<=a.maxX&this.maxY>=a.minY&this.minY<=a.maxY}}class QuadTree{constructor(a){this.boundary=a,this.capacity=64,this.particles=[],this.divided=!1,this.northeast=null,this.northwest=null,this.southeast=null,this.southwest=null}update_tree(a){if(!this.divided){let b=this.particles.length;for(let c=0;c<b;)this.boundary.contains(this.particles[c].position[0],this.particles[c].position[1])?c++:(a.insert(this.particles[c]),this.particles[c]=this.particles[b-1],b--);this.particles.length=b}else this.northeast.update_tree(a),this.northwest.update_tree(a),this.southeast.update_tree(a),this.southwest.update_tree(a)}remove_nodes(){if(!this.divided)this.northeast.remove_nodes(),this.northwest.remove_nodes(),this.southeast.remove_nodes(),this.southwest.remove_nodes();else if(!(this.northeast.divided||this.northwest.divided||this.southeast.divided||this.southwest.divided)){const a=this.northeast.particles.length+this.northwest.particles.length+this.southeast.particles.length+this.southwest.particles.length;a<=this.capacity&&(this.particles.push(...this.northeast.particles,...this.northwest.particles,...this.southeast.particles,...this.southwest.particles),this.divided=!1,this.northeast=null,this.northwest=null,this.southeast=null,this.southwest=null)}}insert(a){return!!this.boundary.contains(a.position[0],a.position[1])&&(!this.divided&&this.particles.length<this.capacity?(this.particles.push(a),!0):(this.subdivide(),this.northeast.insert(a)||this.northwest.insert(a)||this.southeast.insert(a)||this.southwest.insert(a)))}subdivide(){if(this.divided)return;let a=this.boundary.x,b=this.boundary.y,c=this.boundary.w/2,d=this.boundary.h/2,e=new Rectangle(a+c,b-d,c,d);this.northeast=new QuadTree(e);let f=new Rectangle(a-c,b-d,c,d);this.northwest=new QuadTree(f);let g=new Rectangle(a+c,b+d,c,d);this.southeast=new QuadTree(g);let h=new Rectangle(a-c,b+d,c,d);this.southwest=new QuadTree(h),this.divided=!0;for(let a of this.particles)this.insert(a);this.particles=[]}query(a,b){if(!this.boundary.intersects(a)||!a.intersects(this.boundary))return b;for(let c of this.particles)a.contains(c.position[0],c.position[1])&&b.push(c);return this.divided&&(this.northwest.query(a,b),this.northeast.query(a,b),this.southwest.query(a,b),this.southeast.query(a,b)),b}}